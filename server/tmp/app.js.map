{"version":3,"file":"app.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;;;;;;;;;;;;;;;;;;AC3CA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACnBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClCA;AACA;AAUA;;;;;;;;;;;;;;;;;ACXA;AAEA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;;;ACPA;;;;;;;;;;;;;;;;;;;ACHA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;ACRA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACPA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAEA;;;;;;;;;;;;;;;;ACDA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClBA;AAEA;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;ACVA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;ACdA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;ACtBA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;AClBA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sources":["webpack://server/./src/auths/index.ts","webpack://server/./src/auths/jwt.ts","webpack://server/./src/commons/logger.ts","webpack://server/./src/configs/index.ts","webpack://server/./src/graphqls/context.ts","webpack://server/./src/graphqls/dataloader.ts","webpack://server/./src/graphqls/index.ts","webpack://server/./src/graphqls/resolvers/index.ts","webpack://server/./src/graphqls/resolvers/study/query.ts","webpack://server/./src/graphqls/schema.ts","webpack://server/./src/graphqls/type-defs.ts","webpack://server/./src/middlewares/error-handler.ts","webpack://server/./src/providers/client.ts","webpack://server/./src/providers/study.ts","webpack://server/./src/providers/user.ts","webpack://server/./src/routes/auth.ts","webpack://server/./src/routes/index.ts","webpack://server/external commonjs \"@graphql-tools/schema\"","webpack://server/external commonjs \"@prisma/client\"","webpack://server/external commonjs \"bcrypt\"","webpack://server/external commonjs \"express\"","webpack://server/external commonjs \"express-graphql\"","webpack://server/external commonjs \"jsonwebtoken\"","webpack://server/external commonjs \"log4js\"","webpack://server/external commonjs \"passport\"","webpack://server/external commonjs \"passport-jwt\"","webpack://server/external commonjs \"passport-local\"","webpack://server/external node-commonjs \"fs\"","webpack://server/external node-commonjs \"http\"","webpack://server/external node-commonjs \"path\"","webpack://server/webpack/bootstrap","webpack://server/webpack/runtime/compat get default export","webpack://server/webpack/runtime/define property getters","webpack://server/webpack/runtime/hasOwnProperty shorthand","webpack://server/webpack/runtime/make namespace object","webpack://server/./src/index.ts"],"sourcesContent":["import passport from 'passport';\r\nimport { Strategy as LocalStrategy } from 'passport-local';\r\nimport { Strategy as JWTStrategy, ExtractJwt, StrategyOptions } from 'passport-jwt';\r\nimport bcrypt from 'bcrypt';\r\n\r\nimport config from '@/configs';\r\nimport userProvider from '@/providers/user';\r\n\r\npassport.use(\r\n  new LocalStrategy(\r\n    {\r\n      usernameField: 'username',\r\n      passwordField: 'password',\r\n      session: false,\r\n    },\r\n    async (username, password, done) => {\r\n      const { findOneByLoginId } = userProvider();\r\n      const user = await findOneByLoginId(username);\r\n\r\n      if (!user || !bcrypt.compareSync(password, user.login_password)) {\r\n        return done(null, false);\r\n      } else {\r\n        return done(null, {\r\n          id: user.id,\r\n          name: user.name,\r\n          username: user.login_id,\r\n        });\r\n      }\r\n    }\r\n  )\r\n);\r\n\r\nconst opts: StrategyOptions = {\r\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n  secretOrKey: config.jwt_secret_key,\r\n};\r\n\r\npassport.use(\r\n  new JWTStrategy(opts, (jwt_payload, done) => {\r\n    done(null, jwt_payload);\r\n  })\r\n);\r\n\r\nexport default passport;\r\n","import jwt from 'jsonwebtoken';\r\n\r\nimport config from '@/configs';\r\n\r\nexport const sign = (user: Express.User | undefined) => {\r\n  const payload = { user };\r\n  const exp = Math.floor(Date.now() / 1000) + config.jwt_max_age;\r\n\r\n  return {\r\n    token: jwt.sign(\r\n      {\r\n        ...payload,\r\n        exp,\r\n      },\r\n      config.jwt_secret_key\r\n    ),\r\n    user,\r\n    exp,\r\n  };\r\n};\r\n","import log4js from 'log4js';\r\n\r\nimport config from '@/configs/index';\r\n\r\nlog4js.configure({\r\n  appenders: {\r\n    access: {\r\n      type: 'dateFile',\r\n      filename: `${config.log_dir}/access.log`,\r\n      pattern: '-yyyy-MM-dd',\r\n      backups: 7,\r\n    },\r\n    system: {\r\n      type: 'dateFile',\r\n      filename: `${config.log_dir}/system.log`,\r\n      pattern: '-yyyy-MM-dd',\r\n      backups: 7,\r\n    },\r\n    output: {\r\n      type: 'console',\r\n    },\r\n  },\r\n  categories: {\r\n    default: { appenders: ['output'], level: 'info' },\r\n    access: { appenders: ['access'], level: 'all' },\r\n    system: { appenders: ['system', 'output'], level: 'all' },\r\n  },\r\n});\r\nexport default {\r\n  access: log4js.getLogger('access'),\r\n  system: log4js.getLogger('system'),\r\n  express: log4js.connectLogger(log4js.getLogger('access'), {\r\n    level: 'info',\r\n  }),\r\n};\r\n","import path from 'path';\r\nimport fs from 'fs';\r\n\r\nexport interface AppConfig {\r\n  context_path: string;\r\n  server_port: number;\r\n  log_dir: string;\r\n  jwt_secret_key: string;\r\n  jwt_max_age: number;\r\n}\r\n\r\nexport default JSON.parse(fs.readFileSync(path.resolve(__dirname, 'app.config.json'), 'utf-8')) as AppConfig;\r\n","import dataLoader from './dataloader';\r\n\r\nexport const context = () => {\r\n  return {\r\n    loader: dataLoader,\r\n  };\r\n};\r\n\r\nexport type Context = ReturnType<typeof context>;\r\n\r\nexport default context;\r\n","import DataLoader from 'dataloader';\r\nimport _ from 'lodash';\r\n\r\nexport default {};\r\n","import { graphqlHTTP } from 'express-graphql';\r\n\r\nimport schema from '@/graphqls/schema';\r\nimport context from '@/graphqls/context';\r\n\r\nexport default graphqlHTTP((req) => {\r\n  return {\r\n    schema: schema,\r\n    context: context(),\r\n    graphiql: true,\r\n  };\r\n});\r\n","import { Resolvers } from '@/graphqls/resolvers/type';\r\nimport { studiesQueryResolver } from '@/graphqls/resolvers/study/query';\r\n\r\nconst resolver: Resolvers = {\r\n  Query: {\r\n    studies: studiesQueryResolver,\r\n  },\r\n};\r\n\r\nexport default resolver;\r\n","import { QueryResolvers } from '@/graphqls/resolvers/type';\r\nimport studyProvider from '@/providers/study';\r\n\r\nexport const studiesQueryResolver: QueryResolvers['studies'] = async () => {\r\n  const { findAll } = studyProvider();\r\n\r\n  return await findAll();\r\n};\r\n","import { makeExecutableSchema } from '@graphql-tools/schema';\r\n\r\nimport typeDefs from '@/graphqls/type-defs';\r\nimport resolver from '@/graphqls/resolvers/index';\r\n\r\nexport default makeExecutableSchema({\r\n  typeDefs,\r\n  resolvers: resolver,\r\n});\r\n","import path from 'path';\r\nimport fs from 'fs';\r\n\r\nexport default fs.readFileSync(path.resolve(__dirname, 'schema.graphql'), 'utf-8').toString();","import express from 'express';\r\n\r\nimport logger from '@/commons/logger';\r\n\r\nconst error = (err: any, req: express.Request, res: express.Response, next: Function) => {\r\n  logger.system.error(err);\r\n\r\n  res.status(err.status || 500);\r\n  res.end();\r\n};\r\n\r\nconst notfound = (req: express.Request, res: express.Response, next: Function) => {\r\n  next({ status: 404 });\r\n};\r\n\r\nexport default {\r\n  error: error,\r\n  notfound: notfound,\r\n};\r\n","import { PrismaClient } from '@prisma/client';\n\nexport default new PrismaClient();\n","import client from '@/providers/client';\n\nconst studyProvider = () => {\n  const findAll = async () => {\n    return await client.study.findMany();\n  };\n\n  return { findAll };\n};\n\nexport default studyProvider;\n","import client from '@/providers/client';\n\nconst userProvider = () => {\n  const findOneByLoginId = async (loginId: string) => {\n    return await client.user.findUniqueOrThrow({\n      where: {\n        login_id: loginId,\n      },\n    });\n  };\n\n  return { findOneByLoginId };\n};\n\nexport default userProvider;\n","import { Router } from 'express';\r\n\r\nimport passport from '@/auths/index';\r\nimport { sign } from '@/auths/jwt';\r\n\r\nconst router = Router();\r\n\r\nrouter.post(\r\n  '/login',\r\n  passport.authenticate('local', {\r\n    session: false,\r\n  }),\r\n  (req, res, next) => {\r\n    res.json({ ...sign(req.user) });\r\n  }\r\n);\r\n\r\nrouter.post('/auth', passport.authenticate('jwt', { session: false }), (req, res, next) => {\r\n  const auth = req.user;\r\n  res.json(auth);\r\n});\r\n\r\nexport default router;\r\n","import { Router } from 'express';\r\n\r\nimport logger from '@/commons/logger';\r\nimport authRouter from '@/routes/auth';\r\n\r\nconst router = Router();\r\n\r\nrouter.use((req, res, next) => {\r\n  let log: string = `[${req.method}][${req.url}]`;\r\n  if (Object.keys(req.query).length !== 0) {\r\n    log += '\\n' + JSON.stringify(req.query);\r\n  }\r\n  logger.system.info(log);\r\n  next();\r\n});\r\n\r\nrouter.use(authRouter);\r\n\r\nexport default router;\r\n","module.exports = require(\"@graphql-tools/schema\");","module.exports = require(\"@prisma/client\");","module.exports = require(\"bcrypt\");","module.exports = require(\"express\");","module.exports = require(\"express-graphql\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"log4js\");","module.exports = require(\"passport\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"passport-local\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import express from 'express';\r\nimport http from 'http';\r\nimport path from 'path';\r\n\r\nimport passport from '@/auths';\r\nimport config from '@/configs';\r\nimport logger from '@/commons/logger';\r\nimport graphql from '@/graphqls';\r\nimport errorHandler from '@/middlewares/error-handler';\r\nimport router from '@/routes';\r\n\r\nconst app = express();\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\napp.use(passport.initialize());\r\n\r\napp.use(logger.express);\r\n\r\nconst contextPath = process.env.CONTEXT_PATH || config.context_path || 'express-graphql';\r\n\r\napp.use(contextPath, express.static(path.join(__dirname, 'public')));\r\n\r\napp.set('views', path.join(__dirname, 'views'));\r\n\r\napp.use((req, res, next) => {\r\n  res.header('Access-Control-Allow-Origin', '*');\r\n  res.header('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, authorization');\r\n  res.header('Access-Control-Allow-Methods', 'POST, GET, PUT, DELETE, OPTIONS');\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    res.status(200);\r\n    res.end();\r\n  } else {\r\n    next();\r\n  }\r\n});\r\n\r\napp.use(contextPath, router);\r\n\r\napp.use(`${contextPath}graphql`, graphql);\r\n\r\napp.use(errorHandler.notfound);\r\napp.use(errorHandler.error);\r\n\r\napp.set('trust proxy', 'loopback');\r\n\r\nconst port = process.env.PORT || config.server_port || 3000;\r\nconst server = http.createServer(app);\r\nserver.listen(port);\r\n\r\nserver.on('error', (error: Error & { syscall?: string; code?: string }) => {\r\n  logger.system.error(error);\r\n  if (error.syscall !== 'listen') {\r\n    throw error;\r\n  }\r\n  const bind = typeof port === 'string' ? `pipe ${port}` : `port ${port}`;\r\n  switch (error.code) {\r\n    case 'EACCES':\r\n      logger.access.error(`${bind} requires elevated privileges`);\r\n      process.exit(1);\r\n    case 'EADDRINUSE':\r\n      logger.access.error(`${bind} is already in use`);\r\n      process.exit(1);\r\n    default:\r\n      throw error;\r\n  }\r\n});\r\n\r\nserver.on('listening', () => {\r\n  const addr = server.address();\r\n  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr?.port || 3000}`;\r\n  logger.system.info(`Listening on ${bind}`);\r\n});\r\n\r\nexport default app;\r\n"],"names":[],"sourceRoot":""}